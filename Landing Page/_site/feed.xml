<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>QPolls</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/</link>
    <atom:link href="http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 01 Nov 2015 19:51:40 +0100</pubDate>
    <lastBuildDate>Sun, 01 Nov 2015 19:51:40 +0100</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>Fonctionnalités</title>
        <description>&lt;h3 id=&quot;page-dacceuil&quot;&gt;Page d’acceuil&lt;/h3&gt;

&lt;p&gt;La page d’acceuil présente l’application. Elle affiche le nom de l’application, ainsi que quelques statistiques telles que le nombre de sondages ouverts, terminés, ou créés dans la semaine courrante.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Teaching-HEIGVD-TWEB-2015-Project/img/titreR.png&quot; alt=&quot;Mockup de la page d&#39;acceuil&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L’entête contient les champs “QPolls” (nom de l’application), “A propos”, “Sondages” et “Créer un sondage”.&lt;/p&gt;

&lt;p&gt;Cette page a un format “One page”, si l’utilisateur clique sur les champs “A propos” et “Sondages”, il est amené dans des sections plus basses sur la page. S’il clique sur “Créer un nouveau sondage”, il est amené sur une page différente. Si l’utilisateur clique sur le nom de l’application, il est à nouveau amené sur le haut de la page d’acceuil.&lt;/p&gt;

&lt;p&gt;La section affiche une liste de tous les sondages existants. Il est possible d’y rechercher un sondage, en utilisant des filtres tels que “nom du sondage”, “pseudo du créateur”, “sondage ouvert”, “sondage fermé”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Teaching-HEIGVD-TWEB-2015-Project/img/sondagesR.png&quot; alt=&quot;Mockup de la page listant les sondages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pour chaque sondage, il est possible de&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;répondre au sondage, si l’administrateur l’a permis;&lt;/li&gt;
  &lt;li&gt;visualiser ses résultats, si l’administrateur l’a permis;&lt;/li&gt;
  &lt;li&gt;administer le sondage, si on en possède le mot de passe d’administration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chacune des actions précédentes amène sur une nouvelle page.&lt;/p&gt;

&lt;h3 id=&quot;cration--administration-dun-sondage&quot;&gt;Création / administration d’un sondage&lt;/h3&gt;

&lt;p&gt;Un utilisateur souhaitant créer un sondage sur le lien “Créer un sondage” de la page d’acceuil. Il est amené sur une nouvelle page, lui permettant de créer un sondage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Teaching-HEIGVD-TWEB-2015-Project/img/editionR.png&quot; alt=&quot;Mockup de l&#39;édition du sondage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pour créer un sondage, il est nécessaire de spécifier&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le nom du sondage;&lt;/li&gt;
  &lt;li&gt;le pseudo du créateur;&lt;/li&gt;
  &lt;li&gt;un mot de passe d’administration du sondage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un mot de passe qu’une personne devra donner afin de répondre au sondage peut être également spécifié si son créateur le désire.&lt;/p&gt;

&lt;p&gt;Une fois ces informations fournie, l’utilisateur crée le sondage. Cela lui donne les options supplémentaires suivantes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ouvrir / fermer le sondage;&lt;/li&gt;
  &lt;li&gt;ouvrir / fermer la visualisation des résultats;&lt;/li&gt;
  &lt;li&gt;réinitialiser les réponses au sondage;&lt;/li&gt;
  &lt;li&gt;exporter l’état actuel du sondage, ses questions et les réponses qui s’y rapportent;&lt;/li&gt;
  &lt;li&gt;supprimer le sondage (cette option supprimera définitivement toutes les informations relative à ce sondage!).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Par défaut, le sondage ainsi que la visualisation des résultats sont fermés.&lt;/p&gt;

&lt;p&gt;L’utilisateur doit ensuite créer les questions que contiendra son sondage. Pour cela, un lien l’amène sur une page dédiée à la gestion des questions d’un sondage.&lt;/p&gt;

&lt;h3 id=&quot;cration--administration-des-questions-dun-sondage&quot;&gt;Création / administration des questions d’un sondage&lt;/h3&gt;
&lt;p&gt;La page de création / administration des questions affiche la liste des questions appartenant au sondage.
Pour chaque question créée, il est nécessaire d’indiquer&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le texte de la question;&lt;/li&gt;
  &lt;li&gt;le nombre maximum de réponses possibles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Au minimum deux réponses doivent être possibles. Une ou plusieurs réponses peuvent être indiquées comme “correcte” si la question est de type vrai / faux.&lt;/p&gt;

&lt;p&gt;Par défaut, répondre à une question est obligatoire. Le créateur de la question peut néanmoins la marquer comme étant facultative.&lt;/p&gt;

&lt;h3 id=&quot;rpondre--un-sondage&quot;&gt;Répondre à un sondage&lt;/h3&gt;

&lt;p&gt;L’utilisateur souhaitant répondre à un sondage le sélectionne dans la liste des sondages existants. Il est ensuite amené sur une page lui demandant d’entrer un pseudo d’utilisateur, et éventuellement le mot de passe choisi par le créateur du sondage.&lt;/p&gt;

&lt;p&gt;Il peut ensuite répondre aux questions du sondage, l’une après l’autre. Arrivé à la dernière question, il peut soumettre l’ensemble de ses réponses. Il a la possibilité d’interrompre ses réponses au sondage avant de les avoir soumises, puis de reprendre là où il en était resté.&lt;/p&gt;

&lt;h3 id=&quot;visualiser-les-rsultats&quot;&gt;Visualiser les résultats&lt;/h3&gt;

&lt;p&gt;L’utilisateur souhaitant visualiser les réponses un sondage le sélectionne dans la liste des sondages existants. Il est ensuite amené sur une page affichant la liste des questions du sondage.&lt;/p&gt;

&lt;p&gt;A ce moment, il peut visualiser les réponses relatives à chaque question en la sélectionnant dans la liste. 
Pour chaque question, la visualisation de ses résultats comprend&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le texte de la question;&lt;/li&gt;
  &lt;li&gt;les différentes réponses possibles;&lt;/li&gt;
  &lt;li&gt;si une réponses était l’une des réponses “correcte”, l’indication que celle-ci était une réponse correcte.&lt;/li&gt;
  &lt;li&gt;le pourcentage de personnes ayant sélectionné chaque réponse.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L’utilisateur peut se rendre aux questions précédentes/suivantes à l’aide des flèches directionnelles.&lt;/p&gt;

</description>
        <pubDate>Sat, 31 Oct 2015 10:40:57 +0100</pubDate>
        <link>http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/2015/10/31/fonctionnalites.html</link>
        <guid isPermaLink="true">http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/2015/10/31/fonctionnalites.html</guid>
        
        
      </item>
    
      <item>
        <title>API Rest</title>
        <description>&lt;h1 id=&quot;interface-rest&quot;&gt;Interface REST&lt;/h1&gt;
&lt;p&gt;L’interface REST de notre application permet d’interagir avec les fonctionnalités des sondages et de ce qui les compose. L’API est utilise le JSON comme format de transmission de données. Elle est disponible à l’adresse &lt;code&gt;/api&lt;/code&gt; et reconnaît les chemins suivants:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/api/poll&lt;/code&gt; : Renvoie des statistiques à propos de tous les sondages existants:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        nb_open : &amp;lt;nombre de sondages ouverts&amp;gt;
        nb_closed : &amp;lt;nombre de sondages terminés&amp;gt;
        nb_recent : &amp;lt;nombres de sondages récents&amp;gt;
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Le nombre de sondages récents correspond au nombre de sondages créés depuis une date x fournie par le client lorsqu’il effectue sa requête dans l’URL: &lt;code&gt;?since=mm.dd.aaaa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Si le client n’a rien spécifié lors de sa requête, &lt;code&gt;nb_recent&lt;/code&gt; = &lt;code&gt;nb_open + nb_closed&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;&lt;/code&gt; : Renvoie des informations à propos d’un sondage en particulier sous la forme suivante:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        name : &quot;&amp;lt;nom du sondage&amp;gt;&quot;,
        creator : &quot;&amp;lt;nom du créateur&amp;gt;&quot;,
        creation_date : &quot;&amp;lt;mm.dd.aaaa&amp;gt;&quot;,
        state : &quot;draft|open|close&quot;,
        nb_questions : &amp;lt;nombre de questions&amp;gt;,
        nb_participations : &amp;lt;nombre de participants différents&amp;gt;
    }
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/api/polls/draft&lt;/code&gt;, &lt;code&gt;/api/polls/open&lt;/code&gt; et &lt;code&gt;/api/polls/closed&lt;/code&gt; : Renvoie la liste des sondages ouverts, respectivement terminés selon le json suivant:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        polls : [{poll}, {poll}, ..., {poll}]
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;où la structure &lt;code&gt;{poll}&lt;/code&gt; correspond au json décrit au point précédent, en y ajoutant la valeur &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Cette requête permet de faire de la pagination en renvoyant &lt;em&gt;nb&lt;/em&gt; résultats depuis un numéro &lt;em&gt;FROM&lt;/em&gt; en spécifiant dans l’URL les paramètres suivants: &lt;code&gt;?from=x&amp;amp;nb=y&lt;/code&gt;. Attention, si aucun paramètre n’est spécifié, la liste de tous les sondages est renvoyée (et c’est le mal!).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question/&amp;lt;questionid&amp;gt;&lt;/code&gt; : Renvoie les informations à propos d’une question particulière d’un sondage en particulier sous la forme:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        text : &quot;&amp;lt;texte de la question&amp;gt;&quot;,
        choices_available : &amp;lt;nombre de choix qu&#39;il est possible de choisir simultanément&amp;gt;,
        optional : &amp;lt;true|false&amp;gt;,
        choices : [
            {
                id : &amp;lt;id&amp;gt;,
                text : &quot;&amp;lt;texte du choix&amp;gt;&quot;
            }
        ]
    }
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/questions&lt;/code&gt; : Renvoie la liste des questions du sondage spécifié sous la forme:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        questions : [{question}, {question}, ..., {question}]
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;où la structure &lt;code&gt;{poll}&lt;/code&gt; correspond au json décrit au point précédent, en y ajoutant la valeur &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question/&amp;lt;questionid&amp;gt;/results&lt;/code&gt; : Renvoie les résultats actuels pour une question sous la forme:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        text : &quot;&amp;lt;texte de la question&amp;gt;&quot;
        nb_answers : &amp;lt;nombre de résultats collectés&amp;gt;,
        results : [
            {
                id : &amp;lt;id&amp;gt;,
                text : &quot;&amp;lt;texte du choix&amp;gt;&quot;,
                correct : &amp;lt;true|false&amp;gt;,
                nb_chosen : &amp;lt;nb de personnes ayant sélectionné ce choix&amp;gt;
            }
        ]
    }
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;/api/poll&lt;/code&gt; : Crée un nouveau sondage dans la base de données. Le status du sondage nouvellement créé est toujours &lt;em&gt;draft&lt;/em&gt;. Le client envoie les informations du nouveau sondage sous le forme:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        name : &quot;&amp;lt;nom du sondage&amp;gt;&quot;,
        creator : &quot;&amp;lt;nom du créateur&amp;gt;&quot;,
        admin_password : &quot;&amp;lt;mot de passe d&#39;administration&amp;gt;&quot;,
        user_password : &quot;&amp;lt;mot de passe à destination des utilisateurs&amp;gt;&quot;
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Le mot de passe &lt;em&gt;admin_password&lt;/em&gt; est obligatoire, mais le mot de passe &lt;em&gt;user_password&lt;/em&gt; est facultatif, le cas échéant n’importe qui peut accéder au sondage et y participer.&lt;/p&gt;

&lt;p&gt;Le serveur répond simplement un message contenant l’dentifiant du sondage nouvellement créé: &lt;code&gt;{id : &amp;lt;id&amp;gt;}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question&lt;/code&gt; : Crée une nouvelle question dans le sondage spécifié. Le client spécifie la question et éventuellement les choix possibles sous la forme:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        text : &quot;&amp;lt;texte de la question&amp;gt;&quot;,
        choices_available : &amp;lt;nombre de choix qu&#39;il est possible de choisir simultanément&amp;gt;,
        optional : &amp;lt;true|false&amp;gt;,
        choices : [
            {
                text : &quot;&amp;lt;texte du choix&amp;gt;&quot;,
                correct : &amp;lt;true|false&amp;gt;
            }
        ]
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Le serveur répond simplement un message contenant l’dentifiant de la question nouvellement créée: &lt;code&gt;{id : &amp;lt;id&amp;gt;}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question/&amp;lt;questionid&amp;gt;/choice&lt;/code&gt; : Crée un nouveau choix dans la question spécifiée du sondage spécifié. Le nouveau choix prend la forme:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        text : &quot;&amp;lt;texte du choix&amp;gt;&quot;,
        correct : &amp;lt;true|false&amp;gt;
    }
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;&lt;/code&gt; : Modifie un sondage existant. Le client spécifie ses modifications dans la structure suivante:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        name : &quot;&amp;lt;nom du sondage&amp;gt;&quot;,
        creator : &quot;&amp;lt;nom du créateur&amp;gt;&quot;,
        admin_password : &quot;&amp;lt;mot de passe d&#39;administration&amp;gt;&quot;,
        user_password : &quot;&amp;lt;mot de passe à destination des utilisateurs&amp;gt;&quot;,
        state : &quot;draft|open|close&quot;,
        public_results : &amp;lt;true|false&amp;gt;
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Chaque champ est facultatif, le client peut très bien ne modifier qu’une propriété.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question/&amp;lt;questionid&amp;gt;&lt;/code&gt; : Modifie une question existante. Le client spécifie ses modifications dans la structure suivante:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        text : &quot;&amp;lt;texte de la question&amp;gt;&quot;,
        choices_available : &amp;lt;nombre de choix qu&#39;il est possible de choisir simultanément&amp;gt;,
        optional : &amp;lt;true|false&amp;gt;
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Chaque champ est facultatif, le client peut très bien ne modifier qu’une propriété.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question/&amp;lt;questionid&amp;gt;/choice/&amp;lt;choiceid&amp;gt;&lt;/code&gt; : Modifie un choix d’une question. Le client spécifie ses modifications dans la structure suivante:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    {
        text : &quot;&amp;lt;texte du choix&amp;gt;&quot;,
        correct : &amp;lt;true|false&amp;gt;
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Chaque champ est facultatif, le client peut très bien ne modifier qu’une propriété.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;&lt;/code&gt; : Supprime un sondage existant. Attention, cette action supprimera aussi toutes les questions et leurs choix liées à ce sondage.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question/&amp;lt;questionid&amp;gt;&lt;/code&gt; : Supprime une question d’un sondage. Attention, cette action supprimera aussi tous les choix liés à cette question.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt; &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question/&amp;lt;questionid&amp;gt;/choice/&amp;lt;choiceid&amp;gt;&lt;/code&gt; : Supprime un choix d’une question.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dans cette première partie seront implémentées les requêtes GET et POST ci-dessus. Deux exemples, un GET et un POST sont dosponibles sur &lt;a href=&quot;REST examples.md&quot;&gt;cette page&lt;/a&gt;. Dans de futures versions de l’application, l’API couvrira la gestion des participations et des réponses aux questions.&lt;/p&gt;

&lt;h2 id=&quot;remarques&quot;&gt;Remarques&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pour certaines fonctionnalités de recherche, comme par exemple chercher le contenu d’une question en particulier d’un sondage via &lt;code&gt;/api/poll/&amp;lt;pollid&amp;gt;/question/&amp;lt;questionid&amp;gt;&lt;/code&gt; il n’est pas absolument nécessaire de spécifier le &lt;code&gt;pollid&lt;/code&gt;. En effet, nous utilisons directement les identifiants attribués par mongodb dans les URL, donc la recherche d’une question peut très bien être effectuée uniquement en connaissant son identifiant. Le chemin d’accès des questions aurait d’ailleurs très bien pu être simplement &lt;code&gt;/api/question/&amp;lt;questionid&amp;gt;&lt;/code&gt;, cependant nous avons décidé de placer les questions dans le chemin d’un sondage car il s’agit d’une relation de composition. Une question ne peut exister sans sondage. Idem pour les choix des questions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lorsque le client effectue une requête erronnée, par exemple un POST ne contenant pas tous les champs obligatoires pour créer une ressource, le serveur contrôle la présence et le type de chacun des champs et retourne une erreur n°418 &lt;em&gt;I am a teapot&lt;/em&gt;. D’autre part, dans le &lt;em&gt;body&lt;/em&gt; de la réponse, le serveur aura spécifié quels champs sont incorrects selon le json:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
{
    errors : [&quot;champ&quot;, &quot;champ&quot;, ..., &quot;champ&quot;]
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;où “champ” est le nom de chaque champ incorrect, qu’il soit manquant ou contienne un type incorrect. Le client sait alors que sa requête est fausse et peut la corriger.&lt;/p&gt;

&lt;h1 id=&quot;exemples-de-lutilisation-de-linterface-rest&quot;&gt;Exemples de l’utilisation de l’interface REST&lt;/h1&gt;
&lt;p&gt;GET &lt;code&gt;/api/poll&lt;/code&gt;
—————&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
GET /api/poll HTTP/1.1
Host: localhost:3000
Accept: application/json
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 41
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
{&quot;nb_open&quot;:0,&quot;nb_closed&quot;:0,&quot;nb_recent&quot;:0}
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;post-apipoll&quot;&gt;POST &lt;code&gt;/api/poll&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;
POST /api/poll HTTP/1.1
Host: localhost:3000
Content-Type: application/json; charset=UTF-8
Content-Length: 107
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
{
   &quot;name&quot; : &quot;TWEB - Questionnaire n..1&quot;,
   &quot;creator&quot; : &quot;QPoll staff&quot;,
   &quot;admin_password&quot; : &quot;tweb1234&quot;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 33
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
{&quot;id&quot;:&quot;5634abe6e4530b2459ce91e5&quot;}
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Oct 2015 09:40:57 +0100</pubDate>
        <link>http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/2015/10/31/rest.html</link>
        <guid isPermaLink="true">http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/2015/10/31/rest.html</guid>
        
        
      </item>
    
      <item>
        <title>Modèle de domaine</title>
        <description>&lt;h1 id=&quot;modle-de-donnes&quot;&gt;Modèle de données&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/Teaching-HEIGVD-TWEB-2015-Project/img/dataModel.png&quot; alt=&quot;Modèle de données&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;remarques&quot;&gt;Remarques&lt;/h2&gt;
&lt;p&gt;Nous avons conservé les cardinalités des relations et les tables proposés par la modèle présent dans la spécification de la partie 1.&lt;/p&gt;

&lt;p&gt;Pour mettre en oeuvre la notion de relation, nous avons utilisé un champ “Foreign key” xxx_id référençant le champ “_id” mongo de la table référencée.&lt;/p&gt;

&lt;p&gt;Nous avons utilisé les mêmes noms pour les champs des documents mongo et pour les payloads JSON des requêtes http.&lt;/p&gt;

</description>
        <pubDate>Sat, 31 Oct 2015 08:40:57 +0100</pubDate>
        <link>http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/2015/10/31/modele.html</link>
        <guid isPermaLink="true">http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/2015/10/31/modele.html</guid>
        
        
      </item>
    
      <item>
        <title>Tests Effectués</title>
        <description>&lt;h1 id=&quot;stratgie-de-tests&quot;&gt;Stratégie de tests&lt;/h1&gt;
&lt;p&gt;##Opérations de tests&lt;/p&gt;

&lt;p&gt;Afin de tester les fonctionnalités de base de notre API REST, nous utilisons le module &lt;code&gt;api-copilot&lt;/code&gt; nous permettant d’effectuer des requêtes et de les valider. Nous allons tester les quelques requêtes implémentées dans cette partie 1:&lt;/p&gt;

&lt;p&gt;Premièrement nous allons insérer des données:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Créer un sondage en passant une structure incorrecte, champ manquant par exemple, et le serveur devrait renvoyer un code d’erreur et une structure listant les erreurs&lt;/li&gt;
  &lt;li&gt;Créer plusieurs sondages&lt;/li&gt;
  &lt;li&gt;Créer plusieurs questions dans chacun de ces sondages, parfois en spécifiant directement une liste de choix&lt;/li&gt;
  &lt;li&gt;Ajouter des choix dans certaines questions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Puis, dans un second temps, nous allons contrôler que ces données ont bien été créées:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Récupérer les statistiques de la page d’accueil et contrôler que les trois statistiques soient cohérentes par rapport aux données insérées, soit:
    &lt;ul&gt;
      &lt;li&gt;Nombre de sondages total = nombre de sondages créés&lt;/li&gt;
      &lt;li&gt;Nombre de sondages de cette semaine = nombre de sondages créés&lt;/li&gt;
      &lt;li&gt;Nombre de sondages ouverts 0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Via la même URL &lt;code&gt;/api/poll&lt;/code&gt;, récupérer le nombre de sondages créés récemment en précisant &lt;code&gt;?since=&amp;lt;date de demain&amp;gt;&lt;/code&gt; et la statistique &lt;code&gt;nb_recent&lt;/code&gt; devrait être = 0.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Récupérer les listes aux adresses &lt;code&gt;/api/polls/draft&lt;/code&gt;, &lt;code&gt;/api/polls/open&lt;/code&gt; et &lt;code&gt;/api/polls/closed&lt;/code&gt; où les sondages &lt;code&gt;draft&lt;/code&gt; devraient contenir la liste de tous les sondages créés précédemment, et les deux autres devraient être vides&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Récupérer les questions d’un sondage et contrôler qu’il y en a autant que de questions insérées&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Pour chacune des questions, contrôler que le nombre de choix insérés correspond au nombre de choix spécifiés à la création de la question + les choix ajoutés après coup&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rsultats&quot;&gt;Résultats&lt;/h2&gt;
&lt;p&gt;Les résultats rendus par notre script de test pour la partie 1 correspondent à nos attente et semblent indiquer que tout a bien été traité du côté de l’API REST. Voici le listing des résultats:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
TWEB Test for Part 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Base URL set to http://localhost:3000/api
Runtime parameters: none
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 1: get stats before insert
http[1] GET /api/poll
http[1] 200 OK in 74ms
Completed in 77ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 2: store stats before insert
Completed in 1ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 3: create an invalid poll
http[2] POST /api/poll
http[2] 418 undefined in 51ms
Completed in 53ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 4: create 4 polls
http[3] POST /api/poll
http[4] POST /api/poll
http[5] POST /api/poll
http[6] POST /api/poll
http[3] 200 OK in 53ms
http[4] 200 OK in 56ms
http[5] 200 OK in 58ms
http[6] 200 OK in 64ms
Completed in 67ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 5: create 3 questions in each poll
http[7] POST /api/poll/56361e96fa5e1a927544f215/question
http[8] POST /api/poll/56361e96fa5e1a927544f215/question
http[9] POST /api/poll/56361e96fa5e1a927544f215/question
http[10] POST /api/poll/56361e97fa5e1a927544f216/question
http[11] POST /api/poll/56361e97fa5e1a927544f216/question
http[12] POST /api/poll/56361e97fa5e1a927544f216/question
http[13] POST /api/poll/56361e97fa5e1a927544f217/question
http[14] POST /api/poll/56361e97fa5e1a927544f217/question
http[15] POST /api/poll/56361e97fa5e1a927544f217/question
http[16] POST /api/poll/56361e97fa5e1a927544f218/question
http[17] POST /api/poll/56361e97fa5e1a927544f218/question
http[18] POST /api/poll/56361e97fa5e1a927544f218/question
http[7] 200 OK in 67ms
http[12] 200 OK in 67ms
http[17] 200 OK in 68ms
http[8] 200 OK in 75ms
http[13] 200 OK in 76ms
http[18] 200 OK in 77ms
http[9] 200 OK in 82ms
http[14] 200 OK in 84ms
http[10] 200 OK in 88ms
http[15] 200 OK in 88ms
http[11] 200 OK in 96ms
http[16] 200 OK in 97ms
Completed in 102ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 6: get stats after insert
http[19] GET /api/poll
http[19] 200 OK in 12ms
Completed in 13ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 7: check stats
Before insert: 216, after insert: 220
220 = 216 + 4, everything seems OK
Completed in 1ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 8: get stats for tomorrow
http[20] GET /api/poll
http[20] 200 OK in 14ms
Completed in 15ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 9: check tomorrow stats
There are 0 polls created in the future, everything seems OK
Completed in 0ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 10: get drafts/open/closed
http[21] GET /api/polls/draft
http[22] GET /api/polls/open
http[23] GET /api/polls/closed
http[22] 200 OK in 89ms
http[23] 200 OK in 219ms
http[21] 200 OK in 380ms
Completed in 381ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 11: check draft/open/closed
Drafts: 220, should be 220
Open: 0, should be 0
Closed: 0, should be 0
Found all 4 polls
Completed in 2ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 12: get the questions of each polls
http[24] GET /api/poll/56361e96fa5e1a927544f215/questions
http[25] GET /api/poll/56361e97fa5e1a927544f216/questions
http[26] GET /api/poll/56361e97fa5e1a927544f217/questions
http[27] GET /api/poll/56361e97fa5e1a927544f218/questions
http[24] 200 OK in 34ms
http[26] 200 OK in 37ms
http[25] 200 OK in 40ms
http[27] 200 OK in 39ms
Completed in 42ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
STEP 13: check the number of questions of each polls
Question contains 0 choices, should contain 0, seems ok
Question contains 0 choices, should contain 0, seems ok
Question contains 2 choices, should contain 2, seems ok
Question contains 0 choices, should contain 0, seems ok
Question contains 0 choices, should contain 0, seems ok
Question contains 2 choices, should contain 2, seems ok
Question contains 0 choices, should contain 0, seems ok
Question contains 0 choices, should contain 0, seems ok
Question contains 2 choices, should contain 2, seems ok
Question contains 0 choices, should contain 0, seems ok
Question contains 0 choices, should contain 0, seems ok
Question contains 2 choices, should contain 2, seems ok
Found all 3 questions
Completed in 2ms
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
DONE in 0.76s!
&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 31 Oct 2015 07:40:57 +0100</pubDate>
        <link>http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/2015/10/31/tests.html</link>
        <guid isPermaLink="true">http://jurporan.github.io/Teaching-HEIGVD-TWEB-2015-Project/2015/10/31/tests.html</guid>
        
        
      </item>
    
  </channel>
</rss>
